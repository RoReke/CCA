---
title: "Ejercicios 14 y 15"
format: html
editor: visual
toc: true
lang: es
---

### Ejercicio 14 (Cadena de Markov)

![](images/paste-BFB70441.png){width="637"}

Se solicita efectuar los siguientes c√°lculos en R.

a\. Crear un vector que represente el estado inicial.

```{r}
p_0 <- c(0.40, 0.60)
p_0
```

b\. Crear una matriz que represente las transiciones de un estado a otro.

```{r}
p <- matrix(c(0.50, 0.50, 0.75, 0.25), nrow = 2, ncol = 2, byrow = TRUE)
p
```

c\. Calcular los vectores que representen las situaciones en los momentos t1 (al

finalizar el primer mes), t2, t5 y tn (para √©ste √∫ltimo general√≠celo en R).

```{r}
p_1 <- p_0 %*% p
p_1
p_2 <- p_1 %*% p
p_2

get_estado <- function(t, p_0, p) {
  p_t <- p_0 %*% p
  if (t != 1) {
    for (i in 2:t) {
      p_t <- p_t %*% p
    }
  }
  colnames(p_t) <- c("A", "B")
  return(p_t)
}

get_estado(5, p_0, p) 
```

d\. Verificar con el comando sum() que dichos vectores cumplen con ser vectores de

probabilidad o estoc√°stico y con el comando apply() que la matriz de transici√≥n es

estoc√°stica.

```{r}
sum(p_0)
apply(p, 1, sum)
```

e\. Calcular el vector t que representa el estado firme o fijo de la Cadena Markov.

```{r}
library(ggplot2)
library(purrr)
library(dplyr)
t <- 50
df <- map_df(.x = 1:t, ~ as.data.frame(get_p_t(.x, p_0, p))) %>% 
  mutate(estados = 1:t)

ggplot(df, aes(x = estados)) +
  geom_line(aes(y = A, color = "A")) +
  geom_line(aes(y = B, color = "B")) +
  labs(x = "Estados", y = "Share Mercado") +
  theme_minimal()

```

### Ejercicio 15

![](images/paste-21D9515F.png)

a\. Calcular los anteriores vectores de estados considerando que se parte √∫nicamente

de un estado.

```{r}
P <- matrix(
  c(0.4, 0.3, 0.2, 0.1, 0.1, 0.1, 0.6, 0.2, 0, 0, 1, 0, 0, 0, 0, 1), 
  nrow = 4, 
  byrow = TRUE
)
p_0 <- c(1, 0, 0, 0)

get_estado <- function(t, p_0, p) {
    p_t <- p_0 %*% p
    if (t != 1) {
        for (i in 2:t) {
            p_t <- p_t %*% p
        }
    }
    return(p_t)
}

get_estado(t = 20, p_0, P)
```

b\. Verificar con el comando sum() que dichos vectores cumplen con ser vectores de

probabilidad o estoc√°sticos y con el comando apply() que la matriz de transici√≥n

es estoc√°stica.

```{r}
a <- get_estado(t = 20, p_0, P)
sum(a)
apply(P, 1, FUN = sum)
```

c\. Calcular la matriz Q = (I ‚àí H)‚àí1

```{r}
H <- matrix(c(0.4, 0.3, 0.1, 0.1), nrow = 2, byrow = TRUE)
Q <- solve(diag(2) - H)
Q
```

d.  Calcular la matriz ùëÖ = ùëÑ ‚àó ùê∫

```{r}
G <- matrix(c(0.2, 0.1, 0.6, 0.2), nrow = 2, byrow = TRUE)
R <- Q %*% G
R
```

![](images/paste-C4EA5B09.png){width="577"}

### Ejercicio 16

Crear una funci√≥n que simplemente devuelva el √°rea de un rect√°ngulo tomando como

argumentos, su base y su altura.

```{r}
area_rectangulo <- function(base, altura) {
  base * altura
}
```

```{r}
library(ggplot2)
base <- 5
altura <- 3
area <- area_rectangulo(base, altura)
rectangulo_df <- data.frame(
  x = c(0, base, base, 0, 0),
  y = c(0, 0, altura, altura, 0)
)
ggplot(rectangulo_df, aes(x = x, y = y)) +
  geom_polygon(fill = "blue", alpha = 0.4) +
  geom_path(color = "black", linewidth = 1) +
  ggtitle(paste("√Årea sombreada del rect√°ngulo:", area)) +
  xlab("Base") +
  ylab("Altura") +
  coord_fixed() +
  theme_minimal()
```
