---
title: "Ejercicios del 2 al 10"
format: html
editor: visual
toc: true
lang: es
---

### **Ejercicio 2**

Las edades de un grupo de amigos son 27, 23, 29, 24 y 31 años.

Crear un vector "edades" con estos datos y calcular su media, de forma que la salida se guarde en un fichero llamado "amigos".

Volver a calcularla, pero de forma que ahora el resultado se exhiba en la pantalla.

¿Cómo se obtiene el archivo de texto con los últimos comandos ejecutados?

```{r}
edades <- c(27, 23, 29, 24, 31)
mean(edades)
```

### **Ejercicio 3**

En clase vimos diferentes formas de definir vectores con R. Supongamos que queremos

definir el vector x = (1,2,3,4,5). Comprobar que las siguientes formas son equivalentes,

```{r}

x <- c(1,2,3,4,5)
y <- 1: 5
z <- seq(1,5)

all(x == y & x == z) 

```

### **Ejercicio 4**

Definir el vector `y = (1,3,5,7`) utilizando la función `c().`

¿Cómo lo harían con la función `seq()`?.

```{r}
seq(1, 7, by = 2)
```

### **Ejercicio 5**

Definir los siguientes vectores.

Intenta hacerlo de diferentes formas.

x = (8,7,6,5)

y = (3,3,3,3,3,3,3,3,2,2)

z = (1,1.75,2.5,3.25,4)

```{r}
c(8, 7, 6, 5)
8:5
seq(8, 5, by = -1)

c(3, 3, 3, 3, 3, 3, 3, 3, 2, 2)
rep(c(3, 2), times = c(8, 2))

c(1, 1.75, 2.5, 3.25, 4)
seq(from = 1, to = 4, by = 0.75)
```

### **Ejercicio 6**

Aunque pensamos en vectores como conjuntos de números, un vector en R no es más

que celdas contiguas conteniendo datos. Estos datos deben ser del mismo tipo, pero no

necesariamente números.

Podemos construir así vectores de tipo logical o vectores de tipo character entre otros.

Por ejemplo, hemos creado el vector chica.

El resultado es,

\> profesores

\[1\] "Alberto" "Daniel" "Pablo" "Eduardo"

¿Cómo ha sido definido dicho vector?

```{r}
profesores <- c("Alberto", "Daniel", "Pablo", "Eduardo")
```

### **Ejercicio 7**

En muchas ocasiones nos interesa hacer referencia a determinadas componentes de un

vector. En clase vimos que para ello utilizamos los corchetes \[ \] .

Crear el vector x = (2, −5,4,6, −2,8). A partir de dicho vector definir,

a\) y = (2,4,6,8). Así definido y es el vector formado por las componentes positivas de x.

b\) z = (−5, −2). Así definido z es el vector formado por las componentes negativas de x.

c\) v = (−5,4,6, −2,8). Así definido v es el vector x eliminada la primera componente.

d\) w = (2,4, −2). Así definido w es el vector x tomando las componentes impares

```{r}
x <- c(2, -5, 4, 6, -2, 8)
y <- x[x > 0]
z <- x[x < 0]
v <- x[-1]
w <- x[seq(from = 1, to = length(x), by = 2)]
x 
y 
z
v
w
```

### Ejercicio 8

Sabemos que para sumar vectores éstos deben tener la misma longitud. Sin embargo R

trabaja de manera distinta.

Definir los vectores x = (1,2,3,4,5,6), y = (7,8), z = (9,10,11,12).

Calcular,

a\) x + x

b\) x + y. ¿Qué hace R?

c\) x + z. Ahora R da un warning pero aun así nos da un resultado. ¿Cómo lo ha

calculado?

```{r}
x <- c(1, 2, 3, 4, 5, 6)
y <- c(7, 8)
z <- c(9, 10, 11, 12)
x + x
x + y  
x + z
```

### **Ejercicio 9** 

Define el vector 𝑥 = (1,2,3,4,5,6). A partir de dicho vector se han construido las matrices 𝑚1, 𝑚2, 𝑚3 𝑦 𝑚4.

![](images/paste-D67FB1FE.png)![](images/paste-0A5EFA25.png) Todas las matrices se han definido a partir de 𝑚𝑎𝑡𝑟𝑖𝑥(𝑥, ... ). Intentar reproducir el código necesario para obtener cada una de ellas. Recordar que pueden consultar la ayuda

```{r}
x <- 1:6
matrix(x, nrow = 2, ncol = 3)
matrix(x, nrow = 3, ncol = 2)
matrix(x, nrow = 2, ncol = 3, byrow = TRUE)
cbind(matrix(x, nrow = 3, ncol = 2), matrix(x[1:3], nrow = 3, ncol = 1))
```

### **Ejercicio 10**

¿Qué ocurre cuando definimos una matriz en R y sólo especificamos el número de filas o

el número de columnas?

¿Qué ocurre cuando los datos no se corresponden con la dimensión de la matriz que

queremos definir?

Comprobarlo ejecutando los siguientes comandos,

\> matrix(1: 6, nrow = 2)

\> matrix(1: 6, nrow = 4)

\> matrix(1: 6, nrow = 4, ncol = 4)

```{r}
matrix(1: 6, nrow = 2)
matrix(1: 6, nrow = 4)
matrix(1: 6, nrow = 4, ncol = 4)
```

### **Ejercicio 11**

¿Cuál es la diferencia entre ∗, % ∗ % y outer()? Comprobarlo con las matrices

![](images/paste-56DD1D9F.png)

```{r}
a <- matrix(c(2, 1, 3, 4), nrow = 2)
b <- matrix(c(3, 8), nrow = 2)
#a * b
a %*% b
outer(a, b)



```

### **Ejercicio 12** 

Sean 𝐴 una matriz 2 × 3, 𝐵 una matriz 3 × 4 y 𝐶 una matriz 2 × 3. ¿De qué tipo y dimensión serán los objetos obtenidos de los siguientes comandos de R? ¿Alguno de los comandos produce mensajes de error? ¿Por qué? a) 𝐴 ∗ 𝐵 b) 𝑜𝑢𝑡𝑒𝑟(𝐴, 𝐵) c) 𝐴 + 2 d) 𝐴% ∗ %𝐵 e) exp(𝐵). Nota: exp() es la función exponencial. f) 𝐴 ∗ 𝐶 g) 𝐴% ∗ %C

```{r}
a <- matrix(1:6, nrow = 2, ncol = 3)
b <- matrix(1:12, nrow = 3, ncol = 4)
c <- matrix(10:15, nrow = 2, ncol = 3)

# a*b error
outer(a, b)
a + 2
a %*% b
exp(b)
a * c
# a%*%c error
```

### Ejercicio 13

Crear en R el vector x = (1,2,3,4,5,6) y definir a partir de él las siguientes matrices

![](images/paste-4ABCC647.png)

 

```{r}
x <- 1:6
matrix(x, nrow = 2, ncol = 3)
matrix(x, nrow = 3, ncol = 2)
rbind(
  matrix(x[1:3], nrow = 1, ncol = 3), 
  matrix(x[1:3], nrow = 1, ncol = 3), 
  matrix(x[1:3], nrow = 1, ncol = 3)
)
matrix(x[c(2, 4, 6)], nrow = 3, ncol = 1)
```
